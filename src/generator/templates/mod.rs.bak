//! Templates for generating MCP server and client stubs

pub mod sse;
pub mod stdio;
// WebSocket templates will be implemented in a future release

// Re-export all templates from transport modules
pub use sse::{
    PROJECT_CLIENT_CARGO_TEMPLATE as SSE_CLIENT_CARGO_TEMPLATE,
    PROJECT_CLIENT_TEMPLATE as SSE_CLIENT_TEMPLATE,
    PROJECT_SERVER_CARGO_TEMPLATE as SSE_SERVER_CARGO_TEMPLATE,
    PROJECT_SERVER_TEMPLATE as SSE_SERVER_TEMPLATE,
    PROJECT_TEST_SCRIPT_TEMPLATE as SSE_TEST_SCRIPT_TEMPLATE,
};

pub use stdio::{
    PROJECT_CLIENT_CARGO_TEMPLATE as STDIO_CLIENT_CARGO_TEMPLATE,
    PROJECT_CLIENT_TEMPLATE as STDIO_CLIENT_TEMPLATE,
    PROJECT_SERVER_CARGO_TEMPLATE as STDIO_SERVER_CARGO_TEMPLATE,
    PROJECT_SERVER_TEMPLATE as STDIO_SERVER_TEMPLATE,
    PROJECT_TEST_SCRIPT_TEMPLATE as STDIO_TEST_SCRIPT_TEMPLATE,
};

// WebSocket templates will be added when the WebSocket transport is implemented

// Original templates from templates.rs
/// Template for server main.rs
pub const SERVER_MAIN_TEMPLATE: &str = r#"//! MCP Server: {{name}}

use clap::Parser;
use mcpr::schema::{
    CallToolParams, CallToolResult, Implementation, InitializeResult, JSONRPCError, JSONRPCMessage,
    JSONRPCResponse, ServerCapabilities, TextContent, Tool, ToolInputSchema, ToolResultContent,
    ToolsCapability,
};
use mcpr::transport::stdio::StdioTransport;
use serde_json::{json, Value};
use std::error::Error;
use std::collections::HashMap;
use log::{info, error, debug, warn};

/// CLI arguments
#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Enable debug output
    #[arg(short, long)]
    debug: bool,
}

fn main() -> Result<(), Box<dyn Error>> {
    let args = Args::parse();
    
    if args.debug {
        println!("Debug mode enabled");
    }
    
    println!("Starting MCP server: {{name}}");
    
    // Create a transport for communication
    let mut transport = StdioTransport::new();
    
    // Wait for initialize request
    let message: JSONRPCMessage = transport.receive()?;
    
    // Server implementation here...
    
    Ok(())
}
"#;

/// Template for server Cargo.toml
pub const SERVER_CARGO_TEMPLATE: &str = r#"[package]
name = "{{name}}"
version = "0.1.0"
edition = "2021"
description = "MCP server generated using mcpr CLI"

[dependencies]
mcpr = "0.2.3"
clap = { version = "4.4", features = ["derive"] }
serde_json = "1.0"
log = "0.4"
env_logger = "0.10"
"#;

/// Template for client main.rs
pub const CLIENT_MAIN_TEMPLATE: &str = r#"//! MCP Client: {{name}}

use clap::Parser;
use mcpr::schema::{JSONRPCMessage, JSONRPCRequest, RequestId};
use mcpr::transport::stdio::StdioTransport;
use serde_json::Value;
use std::error::Error;
use std::io::{self, Write};
use std::process::{Command, Stdio};
use log::{info, error, debug, warn};

/// CLI arguments
#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Enable debug output
    #[arg(short, long)]
    debug: bool,
    
    /// Server URI
    #[arg(short, long)]
    uri: String,
}

fn main() -> Result<(), Box<dyn Error>> {
    let args = Args::parse();
    
    if args.debug {
        println!("Debug mode enabled");
    }
    
    println!("Starting MCP client: {{name}}");
    println!("Connecting to server: {}", args.uri);
    
    // Client implementation here...
    
    Ok(())
}
"#;

/// Template for client Cargo.toml
pub const CLIENT_CARGO_TEMPLATE: &str = r#"[package]
name = "{{name}}"
version = "0.1.0"
edition = "2021"
description = "MCP client generated using mcpr CLI"

[dependencies]
mcpr = "0.2.3"
clap = { version = "4.4", features = ["derive"] }
serde_json = "1.0"
log = "0.4"
env_logger = "0.10"
"#;

// Common templates that are not transport-specific
pub const SERVER_README_TEMPLATE: &str = r#"# {{name}}

An MCP server generated using the mcpr CLI.

## Running the Server

```bash
cargo run
```

## Connecting to the Server

You can connect to this server using any MCP client. For example:

```bash
mcpr connect --uri stdio://./target/debug/{{name}}
```

## Available Tools

This server provides the following tools:

- `example`: A simple example tool that processes a query string
"#;

pub const CLIENT_README_TEMPLATE: &str = r#"# {{name}}

An MCP client generated using the mcpr CLI.

## Running the Client

```bash
cargo run -- --uri <server_uri>
```

For example, to connect to a local server:

```bash
cargo run -- --uri stdio://./path/to/server
```

## Usage

Once connected, you can enter queries that will be processed by the server's tools.
Type 'exit' to quit the client.
"#;

pub const PROJECT_README_SSE_TEMPLATE: &str = r#"# {{name}} - MCP Project

A complete MCP project with both client and server components, using sse transport.

This example demonstrates the use of the SSE transport implementation in MCPR, which has been enhanced to properly handle client-server communication with robust error handling and proper shutdown procedures.

## Project Structure

- `server/`: The MCP server implementation
- `client/`: The MCP client implementation
- `test.sh`: A test script to run both client and server

## Building the Project

```bash
# Build the server
cd server
cargo build

# Build the client
cd ../client
cargo build
```

## Running the Server

```bash
cd server
RUST_LOG=debug,mcpr=trace cargo run -- --port 8081
```

## Running the Client

```bash
cd client
RUST_LOG=debug,mcpr=trace cargo run -- --uri "http://localhost:8081" --name "Your Name"
```

## Running the Test Script

The test script will build and run both the server and client with debug logging enabled:

```bash
./test.sh
```

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name

## SSE Transport Features

The SSE transport implementation in this example includes:

1. Robust client-server communication using HTTP
2. Proper handling of client registration and message polling
3. Graceful shutdown with proper cleanup of resources
4. Detailed logging for debugging
5. Error handling for network issues and JSON serialization/deserialization
"#;

pub const PROJECT_README_STDIO_TEMPLATE: &str = r#"# {{name}} - MCP Project

A complete MCP project with both client and server components, using stdio transport.

## Features

- **Robust Communication**: Reliable stdio transport with proper error handling and timeout management
- **Multiple Connection Methods**: Connect to an already running server or start a new server process
- **Interactive Mode**: Choose tools and provide parameters interactively
- **One-shot Mode**: Run queries directly from the command line
- **Comprehensive Logging**: Detailed logging for debugging and monitoring

## Project Structure

- `client/`: The MCP client implementation
- `server/`: The MCP server implementation with tools

## Building the Project

To build both the client and server:

```bash
# Build the server
cd server
cargo build

# Build the client
cd ../client
cargo build
```

## Running the Server

The server can be run in standalone mode:

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <SECONDS>`: Set the timeout for operations (default: 30 seconds)
- `--server-cmd <COMMAND>`: Specify a custom server command

## Testing

Run the test script to verify that everything is working correctly:

```bash
./test.sh
```

This will run tests for all connection methods.

## Extending the Project

You can extend this project by:

1. Adding more tools to the server
2. Enhancing the client with additional features
3. Implementing more sophisticated error handling
4. Adding authentication and security features

## Troubleshooting

If you encounter issues:

1. Enable debug logging with the `--debug` flag
2. Check the server and client logs
3. Verify that the server is running and accessible
4. Ensure that the stdio pipes are properly connected

## Available Tools

This server provides the following tools:

- `hello`: A simple tool that greets a person by name
"#;

```bash
cd server
cargo run
```

Then, in another terminal, run the client with the `--connect` flag:

```bash
cd client
cargo run -- --connect --name "Your Name"
```

### Interactive Mode

To run the client in interactive mode:

```bash
cd client
cargo run -- --interactive
```

This will prompt you for input and display the server's responses.

### Additional Options

- `--debug`: Enable debug logging
- `--timeout <"#;
